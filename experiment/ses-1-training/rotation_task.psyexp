<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="tmptmp" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="blockStartText">
      <CodeComponent name="code_blockStart">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="rootdir = os.getcwd();&amp;#10;sourceImageFile = os.path.join(rootdir, &quot;images&quot;, sourceImage);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#determine radioactive source image&amp;#10;rootdir = os.getcwd()&amp;#10;sourceImageFile = os.path.join(rootdir,'images',sourceImage)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_blockStart" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="radioactive_block_source">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$sourceImageFile" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_block_source" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="New source ahead:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press any key if you're ready to start." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_blockStart">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_blockStart" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="blockEndText">
      <CodeComponent name="code_blockEnd">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="totalReward_text = `£${totalReward}`;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="totalReward_text = &quot;£%.2f&quot; %(totalReward);" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_blockEnd" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPause">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPause" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Well done.&amp;#10;&amp;#10;Take a short break.&amp;#10;&amp;#10;In this block, you obtained:" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="reward_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="reward_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$totalReward_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="textContinue">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textContinue" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="5.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_blockEnd">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_blockEnd" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="5.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="expEndText">
      <CodeComponent name="code_totRew">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="totRew_text = `£${totalReward_tot}`;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="totRew_text = &quot;£%.2f&quot; %(totalReward_tot);" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_totRew" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textEndExp">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textEndExp" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Well done. You completed all blocks in this session.&amp;#10;&amp;#10;In this session, you would have earned:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Thank you" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="finalReward_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="finalReward_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$totRew_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instructed_move">
      <CodeComponent name="code_move_i">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="training_loop_count = (training_loop_count + 1);&amp;#10;if ((training_loop_count === 0)) {&amp;#10;    shieldRotation = 360;&amp;#10;}&amp;#10;target_orientations = [163, 356, 271];&amp;#10;target_orientation = target_orientations[training_loop_count];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="training_loop_count = training_loop_count + 1&amp;#10;&amp;#10;if training_loop_count == 0:&amp;#10;    shieldRotation = 360;&amp;#10;&amp;#10;target_orientations = [163, 356, 271]&amp;#10;&amp;#10;target_orientation = target_orientations[training_loop_count]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        &amp;#10;if shieldRotation%360 == target_orientation%360:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;if (((shieldRotation % 360) === (target_orientation % 360))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_move_i" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="shield_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="target_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="target_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="target_orientation" valType="num" updates="set every repeat" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_move_i">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will now do some practice trials. Move the shield so that the radiation hits the shield in its centre." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="practiceMove">
      <CodeComponent name="code_move">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldRotation = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="shieldRotation = 0; #begin at top" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_move" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="shield_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_move">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="To move the shield around, you can use the &quot;right&quot; and &quot;left&quot; arrow buttons on your keyboard. Try moving the shield now!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_advance_move">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_advance_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If you have understood how to move the shield, &amp;#10;press the space bar to advance to the next screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_move">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_move" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="moveTraining_trigger">
        <Param val="0x0378" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="moveTraining_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="101" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="practiceSize">
      <CodeComponent name="code_size">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_size" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="shield_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radio_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radio_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_size">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="To change the shield size, you can use the &quot;up&quot; and &quot;down&quot; arrow buttons on your keyboard. Try changing the shield size now!&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;If you have understood how to change the shield size, &amp;#10;press the space bar to advance to the next screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_size">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="sizeTraining_trigger">
        <Param val="0x0378" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="sizeTraining_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="102" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if bar_length &lt;= 0:&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = top_amount - 1;&amp;#10;    bottom_amount = bottom_amount - 1;&amp;#10;    top_amount_text = '£'+str(top_amount)&amp;#10;    bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    &amp;#10;    if wins == 0:&amp;#10;        bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        totalReward = totalReward - 2*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    if wins == 1:&amp;#10;        if shieldDegrees == 25:&amp;#10;            bar_length = bar_length + 0.00003;&amp;#10;            totalReward = totalReward + 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [-1, 1, -1];&amp;#10;        if shieldDegrees == 45:&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [-1, -1, 1];&amp;#10;        if shieldDegrees == 65:&amp;#10;            bar_length = bar_length - 0.00003;&amp;#10;            totalReward = totalReward - 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    #laser_long.setAutoDraw(True)&amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    bar_length = bar_length - 0.0001;&amp;#10;    totalReward = totalReward - 2*0.0001;&amp;#10;    red_bar_length = 0.0001*100;&amp;#10;    &amp;#10;    if wins == 1:&amp;#10;        reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((bar_length &lt;= 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = (top_amount - 1);&amp;#10;    bottom_amount = (bottom_amount - 1);&amp;#10;    top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;    bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;        totalReward = (totalReward - (2 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        if ((shieldDegrees === 25)) {&amp;#10;            bar_length = (bar_length + 3e-05);&amp;#10;            totalReward = (totalReward + (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 45)) {&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [(- 1), (- 1), 1];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 65)) {&amp;#10;            bar_length = (bar_length - 3e-05);&amp;#10;            totalReward = (totalReward - (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    bar_length = (bar_length - 0.0001);&amp;#10;    totalReward = (totalReward - (2 * 0.0001));&amp;#10;    red_bar_length = (0.0001 * 100);&amp;#10;    if ((wins === 1)) {&amp;#10;        reward_change_colour = [1, (- 1), (- 1)];&amp;#10;    }&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_0_reset">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if wins == 0:&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    &amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 1;&amp;#10;    if wins == 1:&amp;#10;        bar_length = 0.00001;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0;&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    if wins == 0:&amp;#10;        bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        totalReward = totalReward - 2*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    if wins == 1:&amp;#10;        if shieldDegrees == 25:&amp;#10;            bar_length = bar_length + 0.00003;&amp;#10;            totalReward = totalReward + 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [-1, 1, -1];&amp;#10;&amp;#10;        if shieldDegrees == 45:&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [-1, -1, 1];&amp;#10;            &amp;#10;        if shieldDegrees == 65:&amp;#10;            if totalReward &gt; 0:&amp;#10;                bar_length = bar_length - 0.00003;&amp;#10;                totalReward = totalReward - 2*0.00003;&amp;#10;                red_bar_length = 0.00003*100;&amp;#10;            else:&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    &amp;#10;    if totalReward &gt; 0:&amp;#10;        bar_length = bar_length - 0.0001;&amp;#10;        totalReward = totalReward - 2*0.0001;&amp;#10;        red_bar_length = 0.0001*100;&amp;#10;    else:&amp;#10;        bar_length = 0.00001;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    &amp;#10;    if wins == 1:&amp;#10;        reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 0)) {&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 1;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        bar_length = 1e-05;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;        totalReward = (totalReward - (2 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        if ((shieldDegrees === 25)) {&amp;#10;            bar_length = (bar_length + 3e-05);&amp;#10;            totalReward = (totalReward + (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 45)) {&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [(- 1), (- 1), 1];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 65)) {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                bar_length = (bar_length - 3e-05);&amp;#10;                totalReward = (totalReward - (2 * 3e-05));&amp;#10;                red_bar_length = (3e-05 * 100);&amp;#10;            } else {&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    if ((totalReward &gt; 0)) {&amp;#10;        bar_length = (bar_length - 0.0001);&amp;#10;        totalReward = (totalReward - (2 * 0.0001));&amp;#10;        red_bar_length = (0.0001 * 100);&amp;#10;    } else {&amp;#10;        bar_length = 1e-05;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        reward_change_colour = [1, (- 1), (- 1)];&amp;#10;    }&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_0_reset" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_2__reset">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1;&amp;#10;    totalReward = 2;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;progress_bar_length = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;if wins == 0:&amp;#10;    &amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1;&amp;#10;&amp;#10;    totalReward = 2;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    &amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    &amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;progress_bar_length = 0;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if wins == 0:&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    &amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 1;&amp;#10;    if wins == 1:&amp;#10;        bar_length = 0.00001;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0;&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    if wins == 0:&amp;#10;        bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        totalReward = totalReward - 2*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    if wins == 1:&amp;#10;        if shieldDegrees == 25:&amp;#10;            bar_length = bar_length + 0.00003;&amp;#10;            totalReward = totalReward + 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [-1, 1, -1];&amp;#10;&amp;#10;        if shieldDegrees == 45:&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [-1, -1, 1];&amp;#10;            &amp;#10;        if shieldDegrees == 65:&amp;#10;            if totalReward &gt; 0:&amp;#10;                bar_length = bar_length - 0.00003;&amp;#10;                totalReward = totalReward - 2*0.00003;&amp;#10;                red_bar_length = 0.00003*100;&amp;#10;            else:&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    &amp;#10;    if totalReward &gt; 0:&amp;#10;        bar_length = bar_length - 0.0001;&amp;#10;        totalReward = totalReward - 2*0.0001;&amp;#10;        red_bar_length = 0.0001*100;&amp;#10;    else:&amp;#10;        bar_length = 0.00001;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    &amp;#10;    if wins == 1:&amp;#10;        reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    &amp;#10;progress_bar_length = progress_bar_length + 0.8/nFrames;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 0)) {&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 1;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        bar_length = 1e-05;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;        totalReward = (totalReward - (2 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        if ((shieldDegrees === 25)) {&amp;#10;            bar_length = (bar_length + 3e-05);&amp;#10;            totalReward = (totalReward + (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 45)) {&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [(- 1), (- 1), 1];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 65)) {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                bar_length = (bar_length - 3e-05);&amp;#10;                totalReward = (totalReward - (2 * 3e-05));&amp;#10;                red_bar_length = (3e-05 * 100);&amp;#10;            } else {&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    if ((totalReward &gt; 0)) {&amp;#10;        bar_length = (bar_length - 0.0001);&amp;#10;        totalReward = (totalReward - (2 * 0.0001));&amp;#10;        red_bar_length = (0.0001 * 100);&amp;#10;    } else {&amp;#10;        bar_length = 1e-05;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        reward_change_colour = [1, (- 1), (- 1)];&amp;#10;    }&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;progress_bar_length = (progress_bar_length + (0.8 / nFrames));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="print(totalReward_tot)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="console.log(totalReward_tot);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = (&quot;\u00a3&quot; + totalReward.toString());&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = '£'+str(totalReward)&amp;#10;&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2__reset" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_20p">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;trueMean = storedStream_np[[0, 0]];&amp;#10;trueVariance = storedStream_np[[0, 2]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1.8;&amp;#10;    totalReward = 2;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;progress_bar_length = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;trueMean = storedStream_np[0,0];&amp;#10;trueVariance = storedStream_np[0,2];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;if wins == 0:&amp;#10;    &amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1.8;&amp;#10;&amp;#10;    totalReward = 2;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    &amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    &amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;progress_bar_length = 0;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if wins == 0:&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 0.2;&amp;#10;        bottom_amount = bottom_amount - 0.2;&amp;#10;        top_amount_text = '£'+str(round(top_amount, 2));&amp;#10;        bottom_amount_text = '£'+str(round(bottom_amount, 2));&amp;#10;    &amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 0.6;&amp;#10;        bottom_amount = 0.4;&amp;#10;        top_amount_text = '£'+str(round(top_amount, 2));&amp;#10;        bottom_amount_text = '£'+str(round(bottom_amount, 2));&amp;#10;        &amp;#10;        totalReward = 0.6;&amp;#10;    if wins == 1:&amp;#10;        bar_length = 0.00001;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0;&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    trueMean = storedStream_np[currentFrame,0];&amp;#10;    trueVariance = storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    if wins == 0:&amp;#10;        bar_length = bar_length - 5*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        totalReward = totalReward - 2*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        red_bar_length = 40*5*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;    if wins == 1:&amp;#10;        if shieldDegrees == 25:&amp;#10;            bar_length = bar_length + 0.00003;&amp;#10;            totalReward = totalReward + 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [-1, 1, -1];&amp;#10;&amp;#10;        if shieldDegrees == 45:&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [-1, -1, 1];&amp;#10;            &amp;#10;        if shieldDegrees == 65:&amp;#10;            if totalReward &gt; 0:&amp;#10;                bar_length = bar_length - 0.00003;&amp;#10;                totalReward = totalReward - 2*0.00003;&amp;#10;                red_bar_length = 0.00003*100;&amp;#10;            else:&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    &amp;#10;    if totalReward &gt; 0:&amp;#10;        bar_length = bar_length - 5*0.0001;&amp;#10;        totalReward = totalReward - 2*0.0001;&amp;#10;        red_bar_length = 5*0.0001*40;&amp;#10;    else:&amp;#10;        bar_length = 0.00001;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    &amp;#10;    if wins == 1:&amp;#10;        reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue,trueMean,trueVariance,volatility])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    &amp;#10;progress_bar_length = progress_bar_length + 0.8/nFrames;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 0)) {&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 0.2);&amp;#10;        bottom_amount = (bottom_amount - 0.2);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + Math.round(top_amount, 2).toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + Math.round(bottom_amount, 2).toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 0.6;&amp;#10;        bottom_amount = 0.4;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + Math.round(top_amount, 2).toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + Math.round(bottom_amount, 2).toString());&amp;#10;        totalReward = 0.6;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        bar_length = 1e-05;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    trueMean = storedStream_np[[currentFrame, 0]];&amp;#10;    trueVariance = storedStream_np[[currentFrame, 2]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = (bar_length - (5 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        totalReward = (totalReward - (2 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        red_bar_length = ((40 * 5) * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        if ((shieldDegrees === 25)) {&amp;#10;            bar_length = (bar_length + 3e-05);&amp;#10;            totalReward = (totalReward + (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 45)) {&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [(- 1), (- 1), 1];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 65)) {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                bar_length = (bar_length - 3e-05);&amp;#10;                totalReward = (totalReward - (2 * 3e-05));&amp;#10;                red_bar_length = (3e-05 * 100);&amp;#10;            } else {&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    if ((totalReward &gt; 0)) {&amp;#10;        bar_length = (bar_length - (5 * 0.0001));&amp;#10;        totalReward = (totalReward - (2 * 0.0001));&amp;#10;        red_bar_length = ((5 * 0.0001) * 40);&amp;#10;    } else {&amp;#10;        bar_length = 1e-05;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        reward_change_colour = [1, (- 1), (- 1)];&amp;#10;    }&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;progress_bar_length = (progress_bar_length + (0.8 / nFrames));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="print(totalReward_tot)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="console.log(totalReward_tot);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = (&quot;\u00a3&quot; + totalReward.toString());&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = '£'+str(totalReward)&amp;#10;&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_20p" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_changeLoss">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 20;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;trueMean = storedStream_np[[0, 0]];&amp;#10;trueVariance = storedStream_np[[0, 2]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 1;&amp;#10;    bottom_amount = 0.8;&amp;#10;    totalReward = 1;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;top_amount_text = `£${top_amount}`;&amp;#10;bottom_amount_text = `£${bottom_amount}`;&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;progress_bar_length = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 20; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;trueMean = storedStream_np[0,0];&amp;#10;trueVariance = storedStream_np[0,2];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black';&amp;#10;&amp;#10;if wins == 0:&amp;#10;    &amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 1;&amp;#10;    bottom_amount = 0.8;&amp;#10;&amp;#10;    totalReward = 1;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    &amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    &amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;top_amount_text = &quot;£%.2f&quot; %(top_amount);&amp;#10;bottom_amount_text = &quot;£%.2f&quot; %(bottom_amount);&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;progress_bar_length = 0;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if wins == 0:&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 0.2;&amp;#10;        bottom_amount = bottom_amount - 0.2;&amp;#10;        top_amount_text = &quot;£%.2f&quot; %(top_amount);&amp;#10;        bottom_amount_text = &quot;£%.2f&quot; %(bottom_amount);&amp;#10;    &amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = &quot;£%.2f&quot; %(top_amount);&amp;#10;        bottom_amount_text = &quot;£%.2f&quot; %(bottom_amount);&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = &quot;£%.2f&quot; %(top_amount);&amp;#10;        bottom_amount_text = &quot;£%.2f&quot; %(bottom_amount);&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        bar_length = 0.25;&amp;#10;        top_amount = 0.2;&amp;#10;        bottom_amount = 0.0;&amp;#10;        top_amount_text = &quot;£%.2f&quot; %(top_amount);&amp;#10;        bottom_amount_text = &quot;£%.2f&quot; %(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0.1;&amp;#10;    if wins == 1:&amp;#10;        bar_length = 0.00001;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = &quot;£%.2f&quot; %(top_amount);&amp;#10;        bottom_amount_text = &quot;£%.2f&quot; %(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0;&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    &amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    trueMean = storedStream_np[currentFrame,0];&amp;#10;    trueVariance = storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame == 0:&amp;#10;    if not sendTrigger:&amp;#10;        #we'll send different stim change triggers depending on hit/no-hit&amp;#10;        if currentHit:&amp;#10;            triggerValue = 1&amp;#10;        else:&amp;#10;            triggerValue = 2&amp;#10;&amp;#10;        if colour_id == 1:&amp;#10;            square_colour = 'white'&amp;#10;        elif colour_id == 2:&amp;#10;            square_colour = 'black'&amp;#10;        &amp;#10;        sendTrigger = True&amp;#10;&amp;#10;    if currentHit:&amp;#10;        if wins == 0:&amp;#10;            if shieldDegrees == 20:&amp;#10;                bar_length = bar_length;&amp;#10;                totalReward = totalReward;&amp;#10;                red_bar_length = 0;&amp;#10;            if shieldDegrees == 40:&amp;#10;                bar_length = bar_length - 2.5*(lossFactor/3);&amp;#10;                totalReward = totalReward - lossFactor/3;&amp;#10;                red_bar_length = 2.5*lossFactor/3;&amp;#10;            if shieldDegrees == 60:&amp;#10;                bar_length = bar_length - 2.5*(lossFactor/2);&amp;#10;                totalReward = totalReward - lossFactor/2;&amp;#10;                red_bar_length = 2.5*lossFactor/2;&amp;#10;        if wins == 1:&amp;#10;            if shieldDegrees == 20:&amp;#10;                bar_length = bar_length + 0.00003;&amp;#10;                totalReward = totalReward + 2*0.00003;&amp;#10;                red_bar_length = 0.00003*100;&amp;#10;                reward_change_colour = [-1, 1, -1];&amp;#10;            if shieldDegrees == 40:&amp;#10;                bar_length = bar_length;&amp;#10;                totalReward = totalReward;&amp;#10;                red_bar_length = 0;&amp;#10;                reward_change_colour = [-1, -1, 1];&amp;#10;            if shieldDegrees == 60:&amp;#10;                if totalReward &gt; 0:&amp;#10;                    bar_length = bar_length - 0.00003;&amp;#10;                    totalReward = totalReward - 2*0.00003;&amp;#10;                    red_bar_length = 0.00003*100;&amp;#10;                else:&amp;#10;                    bar_length = 0;&amp;#10;                    totalReward = 0;&amp;#10;                    red_bar_length = 0;&amp;#10;                reward_change_colour = [1, -1, -1];&amp;#10;                &amp;#10;    else:&amp;#10;        if totalReward &gt; 0:&amp;#10;            bar_length = bar_length - 2.5*lossFactor;&amp;#10;            totalReward = totalReward - lossFactor;&amp;#10;            red_bar_length = 2.5*lossFactor;&amp;#10;        else:&amp;#10;            bar_length = 0.00001;&amp;#10;            totalReward = 0;&amp;#10;            red_bar_length = 0;&amp;#10;        if wins == 1:&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            &amp;#10;        if currentHit:&amp;#10;            if wins == 0:&amp;#10;                if shieldDegrees == 20:&amp;#10;                    bar_length = bar_length;&amp;#10;                    totalReward = totalReward;&amp;#10;                    red_bar_length = 0;&amp;#10;                if shieldDegrees == 40:&amp;#10;                    bar_length = bar_length - 2.5*(lossFactor/3);&amp;#10;                    totalReward = totalReward - lossFactor/3;&amp;#10;                    red_bar_length = 2.5*lossFactor/3;&amp;#10;                if shieldDegrees == 60:&amp;#10;                    bar_length = bar_length - 2.5*(lossFactor/2);&amp;#10;                    totalReward = totalReward - lossFactor/2;&amp;#10;                    red_bar_length = 2.5*lossFactor/2;&amp;#10;            if wins == 1:&amp;#10;                if shieldDegrees == 20:&amp;#10;                    bar_length = bar_length + 0.00003;&amp;#10;                    totalReward = totalReward + 2*0.00003;&amp;#10;                    red_bar_length = 0.00003*100;&amp;#10;                    reward_change_colour = [-1, 1, -1];&amp;#10;                if shieldDegrees == 40:&amp;#10;                    bar_length = bar_length;&amp;#10;                    totalReward = totalReward;&amp;#10;                    red_bar_length = 0;&amp;#10;                    reward_change_colour = [-1, -1, 1];&amp;#10;                if shieldDegrees == 60:&amp;#10;                    if totalReward &gt; 0:&amp;#10;                        bar_length = bar_length - 0.00003;&amp;#10;                        totalReward = totalReward - 2*0.00003;&amp;#10;                        red_bar_length = 0.00003*100;&amp;#10;                    else:&amp;#10;                        bar_length = 0;&amp;#10;                        totalReward = 0;&amp;#10;                        red_bar_length = 0;&amp;#10;                    reward_change_colour = [1, -1, -1];&amp;#10;                    &amp;#10;        else:&amp;#10;            if totalReward &gt; 0:&amp;#10;                bar_length = bar_length - 2.5*lossFactor;&amp;#10;                totalReward = totalReward - lossFactor;&amp;#10;                red_bar_length = 2.5*lossFactor;&amp;#10;            else:&amp;#10;                bar_length = 0.00001;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            if wins == 1:&amp;#10;                reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 20:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 40:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 60:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;&amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue,trueMean,trueVariance,volatility])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    &amp;#10;progress_bar_length = progress_bar_length + 0.8/nFrames;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 0)) {&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 0.2);&amp;#10;        bottom_amount = (bottom_amount - 0.2);&amp;#10;        top_amount_text = `£${top_amount}`;&amp;#10;        bottom_amount_text = `£${bottom_amount}`;&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = `£${top_amount}`;&amp;#10;        bottom_amount_text = `£${bottom_amount}`;&amp;#10;    }&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = `£${top_amount}`;&amp;#10;        bottom_amount_text = `£${bottom_amount}`;&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = 0.25;&amp;#10;        top_amount = 0.2;&amp;#10;        bottom_amount = 0.0;&amp;#10;        top_amount_text = `£${top_amount}`;&amp;#10;        bottom_amount_text = `£${bottom_amount}`;&amp;#10;        totalReward = 0.1;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        bar_length = 1e-05;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = `£${top_amount}`;&amp;#10;        bottom_amount_text = `£${bottom_amount}`;&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    trueMean = storedStream_np[[currentFrame, 0]];&amp;#10;    trueVariance = storedStream_np[[currentFrame, 2]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame === 0)) {&amp;#10;    if ((! sendTrigger)) {&amp;#10;        if (currentHit) {&amp;#10;            triggerValue = 1;&amp;#10;        } else {&amp;#10;            triggerValue = 2;&amp;#10;        }&amp;#10;        if ((colour_id === 1)) {&amp;#10;            square_colour = &quot;white&quot;;&amp;#10;        } else {&amp;#10;            if ((colour_id === 2)) {&amp;#10;                square_colour = &quot;black&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;        sendTrigger = true;&amp;#10;    }&amp;#10;    if (currentHit) {&amp;#10;        if ((wins === 0)) {&amp;#10;            if ((shieldDegrees === 20)) {&amp;#10;                bar_length = bar_length;&amp;#10;                totalReward = totalReward;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            if ((shieldDegrees === 40)) {&amp;#10;                bar_length = (bar_length - (2.5 * (lossFactor / 3)));&amp;#10;                totalReward = (totalReward - (lossFactor / 3));&amp;#10;                red_bar_length = ((2.5 * lossFactor) / 3);&amp;#10;            }&amp;#10;            if ((shieldDegrees === 60)) {&amp;#10;                bar_length = (bar_length - (2.5 * (lossFactor / 2)));&amp;#10;                totalReward = (totalReward - (lossFactor / 2));&amp;#10;                red_bar_length = ((2.5 * lossFactor) / 2);&amp;#10;            }&amp;#10;        }&amp;#10;        if ((wins === 1)) {&amp;#10;            if ((shieldDegrees === 20)) {&amp;#10;                bar_length = (bar_length + 3e-05);&amp;#10;                totalReward = (totalReward + (2 * 3e-05));&amp;#10;                red_bar_length = (3e-05 * 100);&amp;#10;                reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;            }&amp;#10;            if ((shieldDegrees === 40)) {&amp;#10;                bar_length = bar_length;&amp;#10;                totalReward = totalReward;&amp;#10;                red_bar_length = 0;&amp;#10;                reward_change_colour = [(- 1), (- 1), 1];&amp;#10;            }&amp;#10;            if ((shieldDegrees === 60)) {&amp;#10;                if ((totalReward &gt; 0)) {&amp;#10;                    bar_length = (bar_length - 3e-05);&amp;#10;                    totalReward = (totalReward - (2 * 3e-05));&amp;#10;                    red_bar_length = (3e-05 * 100);&amp;#10;                } else {&amp;#10;                    bar_length = 0;&amp;#10;                    totalReward = 0;&amp;#10;                    red_bar_length = 0;&amp;#10;                }&amp;#10;                reward_change_colour = [1, (- 1), (- 1)];&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((totalReward &gt; 0)) {&amp;#10;            bar_length = (bar_length - (2.5 * lossFactor));&amp;#10;            totalReward = (totalReward - lossFactor);&amp;#10;            red_bar_length = (2.5 * lossFactor);&amp;#10;        } else {&amp;#10;            bar_length = 1e-05;&amp;#10;            totalReward = 0;&amp;#10;            red_bar_length = 0;&amp;#10;        }&amp;#10;        if ((wins === 1)) {&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;        if (currentHit) {&amp;#10;            if ((wins === 0)) {&amp;#10;                if ((shieldDegrees === 20)) {&amp;#10;                    bar_length = bar_length;&amp;#10;                    totalReward = totalReward;&amp;#10;                    red_bar_length = 0;&amp;#10;                }&amp;#10;                if ((shieldDegrees === 40)) {&amp;#10;                    bar_length = (bar_length - (2.5 * (lossFactor / 3)));&amp;#10;                    totalReward = (totalReward - (lossFactor / 3));&amp;#10;                    red_bar_length = ((2.5 * lossFactor) / 3);&amp;#10;                }&amp;#10;                if ((shieldDegrees === 60)) {&amp;#10;                    bar_length = (bar_length - (2.5 * (lossFactor / 2)));&amp;#10;                    totalReward = (totalReward - (lossFactor / 2));&amp;#10;                    red_bar_length = ((2.5 * lossFactor) / 2);&amp;#10;                }&amp;#10;            }&amp;#10;            if ((wins === 1)) {&amp;#10;                if ((shieldDegrees === 20)) {&amp;#10;                    bar_length = (bar_length + 3e-05);&amp;#10;                    totalReward = (totalReward + (2 * 3e-05));&amp;#10;                    red_bar_length = (3e-05 * 100);&amp;#10;                    reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;                }&amp;#10;                if ((shieldDegrees === 40)) {&amp;#10;                    bar_length = bar_length;&amp;#10;                    totalReward = totalReward;&amp;#10;                    red_bar_length = 0;&amp;#10;                    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;                }&amp;#10;                if ((shieldDegrees === 60)) {&amp;#10;                    if ((totalReward &gt; 0)) {&amp;#10;                        bar_length = (bar_length - 3e-05);&amp;#10;                        totalReward = (totalReward - (2 * 3e-05));&amp;#10;                        red_bar_length = (3e-05 * 100);&amp;#10;                    } else {&amp;#10;                        bar_length = 0;&amp;#10;                        totalReward = 0;&amp;#10;                        red_bar_length = 0;&amp;#10;                    }&amp;#10;                    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                bar_length = (bar_length - (2.5 * lossFactor));&amp;#10;                totalReward = (totalReward - lossFactor);&amp;#10;                red_bar_length = (2.5 * lossFactor);&amp;#10;            } else {&amp;#10;                bar_length = 1e-05;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            if ((wins === 1)) {&amp;#10;                reward_change_colour = [1, (- 1), (- 1)];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 20)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 40)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 60)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;progress_bar_length = (progress_bar_length + (0.8 / nFrames));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = `£${totalReward}`;&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = &quot;£%.2f&quot; %(totalReward);&amp;#10;&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_changeLoss" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="earth_background">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/earth.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="earth_background" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.75, 0.75)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <PolygonComponent name="harmless_area">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="harmless_area" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(6.6, 6.6)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$shieldColour" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.2]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="laser">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="laser" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="laserRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="laser_long">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="laser_long" valType="code" updates="None" name="name"/>
        <Param val="laser_long_opacity" valType="num" updates="set every frame" name="opacity"/>
        <Param val="laserRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.4]]" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1, 1, 1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$sourceImageFile" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <PolygonComponent name="reward_bar_red">
        <Param val="bottom-center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$reward_change_colour" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$reward_change_colour" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="reward_bar_red" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, -0.3+bar_length)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, red_bar_length)" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="reward_bar">
        <Param val="bottom-center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="reward_bar" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, -0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, bar_length)" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="progress_bar_edge">
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="progress_bar_edge" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.8, 0.05)" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="progress_bar">
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="green" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="progress_bar" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(progress_bar_length, 0.05)" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="reward_text_top">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="reward_text_top" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$top_amount_text" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="reward_text_bottom">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="reward_text_bottom" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.6, -0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$bottom_amount_text" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="start_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="start_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.47, -0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Start" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="end_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="end_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.47, -0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="End" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="sizeExamples">
      <TextComponent name="text_size_examples">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_examples" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.23)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If you are unsure about where radiation will be emitted next, you can increase your shield size to capture radiation within a larger range.&amp;#10;&amp;#10;However, this comes at a cost: your shield becomes less efficient. If you catch radiation with a larger shield, some amount of radiation will still pass through and reach Earth. &amp;#10;&amp;#10;Below, you can see the shielding efficiency of &amp;#10;a small, medium, and large shield:" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_size_advance">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_advance" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.36)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="shield_small">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_small_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_small" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_medium">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_medium_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_medium" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_large">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_large_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_large" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.4, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_all_sizes">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_sml.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_all_sizes" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.2, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_size_examples">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size_examples" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="sizeExamples_1">
      <TextComponent name="text_size_examples_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_examples_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.23)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="It is not only about catching the laser with the shield: the closer you place the centre of the shield to the laser, the less damage the latter does. The shield will let less and less radiations through, the closer the laser is to its centre, making the laser less and less visible. However, a larger shield lets more radiations through than a small one.&amp;#10;&amp;#10;You can see differences in laser visibility in the examples below." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_size_advance_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_advance_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.34)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="When you are ready to advance, press any button." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="shield_small_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_small_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_small_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_medium_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_medium_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_medium_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_large_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_large_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_large_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.4, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_size_examples_2">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size_examples_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_1">
      <CodeComponent name="code_begin">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#import necessary packages&amp;#10;import numpy as np;&amp;#10;import os;&amp;#10;&amp;#10;#keyboard constants&amp;#10;kb = keyboard.Keyboard()&amp;#10;keys_move = ['right', 'left'];&amp;#10;keys_size = ['up', 'down'];&amp;#10;key_right = 'right';&amp;#10;key_left = 'left';&amp;#10;key_up = 'up';&amp;#10;key_down = 'down';&amp;#10;&amp;#10;#set constants for the experiment&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;&amp;#10;SHIELD_GROWTH_SPEED = 20; #in degrees&amp;#10;&amp;#10;minShieldDegrees = 25;&amp;#10;maxShieldDegrees = 65;&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;&amp;#10;#instructed training variables&amp;#10;training_loop_count = -1&amp;#10;target_orientation = 0&amp;#10;&amp;#10;#shield variables&amp;#10;shieldDegrees = 45; #because it needs to be predefined&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#initialise list containing data to be saved&amp;#10;saveData = [[&quot;blockID&quot;,&quot;currentFrame&quot;,&quot;laserRotation&quot;,&quot;shieldRotation&quot;,&quot;shieldDegrees&quot;,&quot;currentHit&quot;,&quot;totalReward&quot;,&quot;sendTrigger&quot;,&quot;triggerValue&quot;]]&amp;#10;saveFilename = &quot;savedData_&quot; + str(expInfo['participant']) + str(expInfo['session']) + &quot;.csv&quot; #load stimulusStream into NumPy array&amp;#10;&amp;#10;#reward variables&amp;#10;red_bar_length = 0;&amp;#10;&amp;#10;wins = 0;&amp;#10;&amp;#10;if wins == 0:&amp;#10;    bar_length = 0.5;&amp;#10;    &amp;#10;    top_amount = 7;&amp;#10;    bottom_amount = 6;&amp;#10;&amp;#10;    totalReward = 7;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    bar_length = 0.25;&amp;#10;    &amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    &amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as np from 'numpy';&amp;#10;import * as os from 'os';&amp;#10;var CIRCLE_RADIUS, ROTATION_SPEED, SHIELD_GROWTH_SPEED, bar_length, bottom_amount, kb, key_down, key_left, key_right, key_up, keys_move, keys_size, maxShieldDegrees, minShieldDegrees, red_bar_length, reward_change_colour, saveData, saveFilename, shieldCoords, shieldDegrees, shieldHeight, shieldRotation, shieldWidth, shieldX, shieldY, target_orientation, top_amount, totalReward, training_loop_count, wins;&amp;#10;kb = new keyboard.Keyboard();&amp;#10;keys_move = [&quot;right&quot;, &quot;left&quot;];&amp;#10;keys_size = [&quot;up&quot;, &quot;down&quot;];&amp;#10;key_right = &quot;right&quot;;&amp;#10;key_left = &quot;left&quot;;&amp;#10;key_up = &quot;up&quot;;&amp;#10;key_down = &quot;down&quot;;&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;SHIELD_GROWTH_SPEED = 20;&amp;#10;minShieldDegrees = 25;&amp;#10;maxShieldDegrees = 65;&amp;#10;training_loop_count = (- 1);&amp;#10;target_orientation = 0;&amp;#10;shieldDegrees = 45;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;shieldRotation = 360;&amp;#10;saveData = [[&quot;blockID&quot;, &quot;currentFrame&quot;, &quot;laserRotation&quot;, &quot;shieldRotation&quot;, &quot;shieldDegrees&quot;, &quot;currentHit&quot;, &quot;totalReward&quot;, &quot;sendTrigger&quot;, &quot;triggerValue&quot;]];&amp;#10;saveFilename = (((&quot;savedData_&quot; + expInfo[&quot;participant&quot;].toString()) + expInfo[&quot;session&quot;].toString()) + &quot;.csv&quot;);&amp;#10;red_bar_length = 0;&amp;#10;wins = 0;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 7;&amp;#10;    bottom_amount = 6;&amp;#10;    totalReward = 7;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    bar_length = 0.25;&amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_begin" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_begin_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#import necessary packages&amp;#10;import numpy as np;&amp;#10;import os;&amp;#10;&amp;#10;#keyboard constants&amp;#10;session = 1;&amp;#10;image = 2;&amp;#10;order = 2;&amp;#10;&amp;#10;kb = keyboard.Keyboard()&amp;#10;&amp;#10;if session == 1:&amp;#10;    keys_move = ['s', 'a'];&amp;#10;    keys_size = ['l', 'k'];&amp;#10;    key_right = 's';&amp;#10;    key_left = 'a';&amp;#10;    key_up = 'l';&amp;#10;    key_down = 'k';&amp;#10;if session == 2:&amp;#10;    keys_move = ['l', 'k'];&amp;#10;    keys_size = ['s', 'a'];&amp;#10;    key_right = 'l';&amp;#10;    key_left = 'k';&amp;#10;    key_up = 's';&amp;#10;    key_down = 'a';&amp;#10;&amp;#10;#set constants for the experiment&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;&amp;#10;SHIELD_GROWTH_SPEED = 20; #in degrees&amp;#10;&amp;#10;minShieldDegrees = 20;&amp;#10;maxShieldDegrees = 60;&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;&amp;#10;#instructed training variables&amp;#10;training_loop_count = -1&amp;#10;target_orientation = 0&amp;#10;&amp;#10;#shield variables&amp;#10;shieldDegrees = 40; #because it needs to be predefined&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#initialise list containing data to be saved&amp;#10;saveData = [[&quot;blockID&quot;,&quot;currentFrame&quot;,&quot;laserRotation&quot;,&quot;shieldRotation&quot;,&quot;shieldDegrees&quot;,&quot;currentHit&quot;,&quot;totalReward&quot;,&quot;sendTrigger&quot;,&quot;triggerValue&quot;,&quot;trueMean&quot;,&quot;trueVariance&quot;,&quot;volatility&quot;]]&amp;#10;saveFilename = &quot;savedData_&quot; + str(expInfo['participant']) + str(expInfo['session']) + &quot;.csv&quot; #load stimulusStream into NumPy array&amp;#10;&amp;#10;#reward variables&amp;#10;red_bar_length = 0;&amp;#10;&amp;#10;wins = 0;&amp;#10;&amp;#10;if wins == 0:&amp;#10;    bar_length = 0.5;&amp;#10;&amp;#10;    totalReward_tot = 0;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    bar_length = 0.25;&amp;#10;    &amp;#10;    totalReward_tot = 0;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;win.mouseVisible = False&amp;#10;&amp;#10;totalReward_text = '';&amp;#10;&amp;#10;progress_bar_length = 0;&amp;#10;&amp;#10;lossFactor = 0.003;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as np from 'numpy';&amp;#10;import * as os from 'os';&amp;#10;var CIRCLE_RADIUS, ROTATION_SPEED, SHIELD_GROWTH_SPEED, bar_length, image, kb, key_down, key_left, key_right, key_up, keys_move, keys_size, lossFactor, maxShieldDegrees, minShieldDegrees, order, progress_bar_length, red_bar_length, reward_change_colour, saveData, saveFilename, session, shieldCoords, shieldDegrees, shieldHeight, shieldRotation, shieldWidth, shieldX, shieldY, target_orientation, totalReward_text, totalReward_tot, training_loop_count, wins;&amp;#10;session = 1;&amp;#10;image = 2;&amp;#10;order = 2;&amp;#10;kb = new keyboard.Keyboard();&amp;#10;if ((session === 1)) {&amp;#10;    keys_move = [&quot;s&quot;, &quot;a&quot;];&amp;#10;    keys_size = [&quot;l&quot;, &quot;k&quot;];&amp;#10;    key_right = &quot;s&quot;;&amp;#10;    key_left = &quot;a&quot;;&amp;#10;    key_up = &quot;l&quot;;&amp;#10;    key_down = &quot;k&quot;;&amp;#10;}&amp;#10;if ((session === 2)) {&amp;#10;    keys_move = [&quot;l&quot;, &quot;k&quot;];&amp;#10;    keys_size = [&quot;s&quot;, &quot;a&quot;];&amp;#10;    key_right = &quot;l&quot;;&amp;#10;    key_left = &quot;k&quot;;&amp;#10;    key_up = &quot;s&quot;;&amp;#10;    key_down = &quot;a&quot;;&amp;#10;}&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;SHIELD_GROWTH_SPEED = 20;&amp;#10;minShieldDegrees = 20;&amp;#10;maxShieldDegrees = 60;&amp;#10;training_loop_count = (- 1);&amp;#10;target_orientation = 0;&amp;#10;shieldDegrees = 40;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;shieldRotation = 360;&amp;#10;saveData = [[&quot;blockID&quot;, &quot;currentFrame&quot;, &quot;laserRotation&quot;, &quot;shieldRotation&quot;, &quot;shieldDegrees&quot;, &quot;currentHit&quot;, &quot;totalReward&quot;, &quot;sendTrigger&quot;, &quot;triggerValue&quot;, &quot;trueMean&quot;, &quot;trueVariance&quot;, &quot;volatility&quot;]];&amp;#10;saveFilename = (((&quot;savedData_&quot; + expInfo[&quot;participant&quot;].toString()) + expInfo[&quot;session&quot;].toString()) + &quot;.csv&quot;);&amp;#10;red_bar_length = 0;&amp;#10;wins = 0;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    totalReward_tot = 0;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    bar_length = 0.25;&amp;#10;    totalReward_tot = 0;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;totalReward_text = &quot;&quot;;&amp;#10;progress_bar_length = 0;&amp;#10;lossFactor = 0.003;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_begin_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="title">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="True" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="title" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(None, None)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Save-the-world task" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <TextComponent name="text_instructions_1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to a new session of the save-the-world task!&amp;#10;​&amp;#10;Remember, you can save the world (and make money!) by navigating your shield to where you expect radiation to be emitted.&amp;#10;&amp;#10;Press any key to start the session." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_i1">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_i1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_2">
      <TextComponent name="text_instructions_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.03)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Here you see one substance in the centre of the screen, its red radiation beam, and a white absorbing shield. In this example, the shield is not in the right position and thus the beam is not stopped and damages Earth.&amp;#10;​&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Your task is to manoeuvre the shield to catch as many emissions as possible. Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="shield_miss_earth">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_miss_earth.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_miss_earth" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.373)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_i2">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_i2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="radio_colours">
      <ImageComponent name="radioactive_colour1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive3.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_colour1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.2, 0.11)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="radioactive_colour2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive2.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_colour2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.2, 0.11)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_colours">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_colours" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will encounter two different radioactive sources:&amp;#10;A red and a blue source.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;The only difference between these sources is &amp;#10;how often they change their emission angle over time.&amp;#10;&amp;#10;This session of the game has 4 blocks. Every block lasts about 3min.&amp;#10;You will play 4 sessions in total.&amp;#10;&amp;#10;Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_colours">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_colours" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="reward">
      <ImageComponent name="reward_bar_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/reward_bar.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward_bar_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.7, -0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.15, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_reward">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_reward" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In every session, your reward for saving the world from this radiation starts off at 10£. The more radiation hits Earth, the more reward you lose.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_reward_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_reward_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="On the right of the screen, you will see a bar that reflects your current total reward.&amp;#10;&amp;#10;It will decrease as the radiation hits Earth. You can prevent the decrease by catching the radiation with your shield. &amp;#10;&amp;#10;If the bar hits the bottom, you've lost 1£. The numbers on the top and bottom will reset to your new current total reward and the next lower value." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.1" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_reward">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_reward" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="transparence">
      <ImageComponent name="shield_as_transparence">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_sml.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_as_transparence" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.03)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.2, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_transparence">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_transparence" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The efficiency of the shield will also show up in your reward:&amp;#10;Because larger shields let some radiation through, you will still lose &amp;#10;a small amount of your reward even if you catch the radiation.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Your task is to save the world from this harmful substance, &amp;#10;and keep as much of your reward by doing this!&amp;#10;&amp;#10;Ready?&amp;#10;Press any button to start playing the game." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_transparence">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_transparence" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_1"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('blockID', 1), ('sourceImage', 'radioactive3.png'), ('volatility', 0), ('blockFileName', 'MainVaJmpSession1_block1.csv')]), OrderedDict([('blockID', 2), ('sourceImage', 'radioactive2.png'), ('volatility', 1), ('blockFileName', 'MainVaJmpSession1_block3.csv')]), OrderedDict([('blockID', 3), ('sourceImage', 'radioactive3.png'), ('volatility', 0), ('blockFileName', 'MainVaJmpSession1_block2.csv')]), OrderedDict([('blockID', 4), ('sourceImage', 'radioactive2.png'), ('volatility', 1), ('blockFileName', 'MainVaJmpSession1_block4.csv')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimgen/blocks_training2 - 2.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="blockStartText"/>
    <Routine name="trial"/>
    <Routine name="blockEndText"/>
    <LoopTerminator name="blocks"/>
    <Routine name="expEndText"/>
  </Flow>
</PsychoPy2experiment>
