<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="True" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1280, 720]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="tmptmp" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="SR Research Ltd" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="keyboardBackend" updates="None" val="ioHub" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="plConfidenceThreshold" updates="None" val="0.6" valType="num"/>
    <Param name="plPupilCaptureRecordingEnabled" updates="None" val="True" valType="bool"/>
    <Param name="plPupilCaptureRecordingLocation" updates="None" val="" valType="str"/>
    <Param name="plPupilRemoteAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="plPupilRemotePort" updates="None" val="50020" valType="num"/>
    <Param name="plPupilRemoteTimeoutMs" updates="None" val="1000" valType="num"/>
    <Param name="plPupillometryOnly" updates="None" val="False" valType="bool"/>
    <Param name="plSurfaceName" updates="None" val="psychopy_iohub_surface" valType="str"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="blockStartText">
      <CodeComponent name="code_blockStart">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="rootdir = os.getcwd();&amp;#10;sourceImageFile = os.path.join(rootdir, &quot;images&quot;, sourceImage);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#determine radioactive source image&amp;#10;rootdir = os.getcwd()&amp;#10;sourceImageFile = os.path.join(rootdir,'images',sourceImage)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_blockStart" valType="code"/>
      </CodeComponent>
      <ImageComponent name="radioactive_block_source">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$sourceImageFile" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radioactive_block_source" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_sourceImage">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="text_sourceImage" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Please try to keep you eyes as fixed as possible on the centre of the screen.&amp;#10;&amp;#10;New source ahead:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press any key if you're ready to start." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_blockStart">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_blockStart" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ParallelOutComponent name="blockStart_trigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="blockStart_trigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="10" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.05" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="blockEndText">
      <CodeComponent name="code_blockRew">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="rewardFeedback = `£${totalReward}`;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="rewardFeedback = &quot;£%.2f&quot; %(totalReward)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_blockRew" valType="code"/>
      </CodeComponent>
      <TextComponent name="textPause">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="textPause" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Well done. In this block, you earned:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Take a short break." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="textReward">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="textReward" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$rewardFeedback" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="textContinue">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="textContinue" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="5.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press any key to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_blockEnd">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_blockEnd" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="5.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ParallelOutComponent name="blockEnd_reward_trigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="blockEnd_reward_trigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="20" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.05" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="instructed_move">
      <CodeComponent name="code_move_i">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="training_loop_count = (training_loop_count + 1);&amp;#10;if ((training_loop_count === 0)) {&amp;#10;    shieldRotation = 360;&amp;#10;}&amp;#10;target_orientations = [163, 356, 271];&amp;#10;target_orientation = target_orientations[training_loop_count];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="training_loop_count = training_loop_count + 1&amp;#10;&amp;#10;if training_loop_count == 0:&amp;#10;    shieldRotation = 360;&amp;#10;&amp;#10;target_orientations = [163, 356, 271]&amp;#10;&amp;#10;target_orientation = target_orientations[training_loop_count]" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        &amp;#10;if shieldRotation%360 == target_orientation%360:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;if (((shieldRotation % 360) === (target_orientation % 360))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_move_i" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="shield_move_i">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_move_i" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_move_i">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="blue" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="blue" valType="color"/>
        <Param name="lineWidth" updates="constant" val="3" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_centre_move_i" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="set every frame" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_move_i">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_bg_short_move_i" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="target_move_i">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="red" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="red" valType="color"/>
        <Param name="lineWidth" updates="constant" val="3" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="target_move_i" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every repeat" val="target_orientation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_move_i">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/radioactive1.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radioactive_move_i" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_move_i">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_move_i" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.25)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now do some practice trials. Move the shield so that the radiation hits the shield in its centre." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="practiceMove">
      <CodeComponent name="code_move">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="shieldRotation = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="shieldRotation = 0; #begin at top" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_move" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="shield_move">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_move" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_move">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="blue" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="blue" valType="color"/>
        <Param name="lineWidth" updates="constant" val="3" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_centre_move" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="set every frame" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_move">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_bg_short_move" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_move">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/radioactive1.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radioactive_move" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.5)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_move_s1">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_move_s1" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.25)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="To move the shield around, you can use the &quot;1&quot; and &quot;2&quot; buttons on your response box. Try moving the shield now!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <TextComponent name="text_move_s2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_move_s2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.25)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="To move the shield around, you can use the &quot;3&quot; and &quot;4&quot; buttons on your response box. Try moving the shield now!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <TextComponent name="text_advance_move_s1">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_advance_move_s1" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="If you have understood how to move the shield, &amp;#10;press button &quot;3&quot; to advance to the next screen." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <TextComponent name="text_advance_move_s2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_advance_move_s2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="If you have understood how to move the shield, &amp;#10;press button &quot;1&quot; to advance to the next screen." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_move_s1">
        <Param name="allowedKeys" updates="constant" val="'3'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_move_s1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <KeyboardComponent name="key_resp_move_s2">
        <Param name="allowedKeys" updates="constant" val="'1'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_move_s2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ParallelOutComponent name="moveTraining_trigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="moveTraining_trigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="101" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.05" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="practiceSize">
      <CodeComponent name="code_size">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_size" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="shield_size">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_size" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_size">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="blue" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="blue" valType="color"/>
        <Param name="lineWidth" updates="constant" val="3" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_centre_size" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_size">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_bg_short_size" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <ImageComponent name="radio_size">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/radioactive1.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radio_size" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_size_s1">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_size_s1" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.05)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="To change the shield size, you can use the &quot;3&quot; and &quot;4&quot; buttons on your response box. Try changing the shield size now!&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;If you have understood how to change the shield size, &amp;#10;press button &quot;1&quot; to advance to the next screen." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <TextComponent name="text_size_s2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_size_s2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.05)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="To change the shield size, you can use the &quot;1&quot; and &quot;2&quot; buttons on your response box. Try changing the shield size now!&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;If you have understood how to change the shield size, &amp;#10;press button &quot;3&quot; to advance to the next screen." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_size_s1">
        <Param name="allowedKeys" updates="constant" val="'1'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_size_s1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <KeyboardComponent name="key_resp_size_s2">
        <Param name="allowedKeys" updates="constant" val="'3'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_size_s2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ParallelOutComponent name="sizeTraining_trigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="sizeTraining_trigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="102" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.05" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;bar_length_array = np.zeros(nFrames);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;bar_length_array = np.zeros(nFrames);" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if bar_length &lt;= 0:&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = top_amount - 1;&amp;#10;    bottom_amount = bottom_amount - 1;&amp;#10;    top_amount_text = '£'+str(top_amount)&amp;#10;    bottom_amount_text = '£'+str(bottom_amount)&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        print(shieldRotation)&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    &amp;#10;    bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;    totalReward = totalReward - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;    red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    laser_long.setAutoDraw(True)&amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    bar_length = bar_length - 0.0001;&amp;#10;    totalReward = totalReward - 0.0001;&amp;#10;    red_bar_length = 0.0001*100;&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((bar_length &lt;= 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = (top_amount - 1);&amp;#10;    bottom_amount = (bottom_amount - 1);&amp;#10;    top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;    bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        console.log(shieldRotation);&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;    totalReward = (totalReward - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;    red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    laser_long.setAutoDraw(true);&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    bar_length = (bar_length - 0.0001);&amp;#10;    totalReward = (totalReward - 0.0001);&amp;#10;    red_bar_length = (0.0001 * 100);&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_reset2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;trueMean = storedStream_np[[0, 0]];&amp;#10;trueVariance = storedStream_np[[0, 2]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1;&amp;#10;    totalReward = 2;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;progress_bar_length = 0;&amp;#10;pb_orientation = 0;&amp;#10;pb_degrees = 0;&amp;#10;pb_X = ((np.sin(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_Y = ((np.cos(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_X = np.concatenate([[0], pb_X]);&amp;#10;pb_Y = np.concatenate([[0], pb_Y]);&amp;#10;pb_coords = np.transpose(np.vstack([pb_X, pb_Y]));&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#run_trial()&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;trueMean = storedStream_np[0,0];&amp;#10;trueVariance = storedStream_np[0,2];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;if wins == 0:&amp;#10;    &amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1;&amp;#10;&amp;#10;    totalReward = 2;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    &amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    &amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;progress_bar_length = 0;&amp;#10;pb_orientation = 0;&amp;#10;pb_degrees = 0;&amp;#10;pb_X=np.sin(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_Y=np.cos(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_X = np.concatenate(([0],pb_X));&amp;#10;pb_Y = np.concatenate(([0],pb_Y));&amp;#10;pb_coords = np.transpose(np.vstack((pb_X,pb_Y)))" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if wins == 0:&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    &amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 1;&amp;#10;    if wins == 1:&amp;#10;        bar_length = 0.00001;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0;&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    trueMean = storedStream_np[currentFrame,0];&amp;#10;    trueVariance = storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    if wins == 0:&amp;#10;        bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        totalReward = totalReward - 2*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    if wins == 1:&amp;#10;        if shieldDegrees == 25:&amp;#10;            bar_length = bar_length + 0.00003;&amp;#10;            totalReward = totalReward + 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [-1, 1, -1];&amp;#10;&amp;#10;        if shieldDegrees == 45:&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [-1, -1, 1];&amp;#10;            &amp;#10;        if shieldDegrees == 65:&amp;#10;            if totalReward &gt; 0:&amp;#10;                bar_length = bar_length - 0.00003;&amp;#10;                totalReward = totalReward - 2*0.00003;&amp;#10;                red_bar_length = 0.00003*100;&amp;#10;            else:&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    &amp;#10;    if totalReward &gt; 0:&amp;#10;        bar_length = bar_length - 0.0001;&amp;#10;        totalReward = totalReward - 2*0.0001;&amp;#10;        red_bar_length = 0.0001*100;&amp;#10;    else:&amp;#10;        bar_length = 0.00001;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    &amp;#10;    if wins == 1:&amp;#10;        reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue,trueMean,trueVariance,volatility])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    &amp;#10;progress_bar_length = progress_bar_length + 0.8/nFrames;&amp;#10;&amp;#10;pb_orientation = pb_orientation + (360/nFrames)/2;&amp;#10;pb_degrees = pb_degrees + (360/nFrames)/2;&amp;#10;pb_X=np.sin(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_Y=np.cos(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_X = np.concatenate(([0],pb_X));&amp;#10;pb_Y = np.concatenate(([0],pb_Y));&amp;#10;pb_coords = np.transpose(np.vstack((pb_X,pb_Y)))" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 0)) {&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 1;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        bar_length = 1e-05;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    trueMean = storedStream_np[[currentFrame, 0]];&amp;#10;    trueVariance = storedStream_np[[currentFrame, 2]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;        totalReward = (totalReward - (2 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        if ((shieldDegrees === 25)) {&amp;#10;            bar_length = (bar_length + 3e-05);&amp;#10;            totalReward = (totalReward + (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 45)) {&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [(- 1), (- 1), 1];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 65)) {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                bar_length = (bar_length - 3e-05);&amp;#10;                totalReward = (totalReward - (2 * 3e-05));&amp;#10;                red_bar_length = (3e-05 * 100);&amp;#10;            } else {&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    if ((totalReward &gt; 0)) {&amp;#10;        bar_length = (bar_length - 0.0001);&amp;#10;        totalReward = (totalReward - (2 * 0.0001));&amp;#10;        red_bar_length = (0.0001 * 100);&amp;#10;    } else {&amp;#10;        bar_length = 1e-05;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        reward_change_colour = [1, (- 1), (- 1)];&amp;#10;    }&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;progress_bar_length = (progress_bar_length + (0.8 / nFrames));&amp;#10;pb_orientation = (pb_orientation + ((360 / nFrames) / 2));&amp;#10;pb_degrees = (pb_degrees + ((360 / nFrames) / 2));&amp;#10;pb_X = ((np.sin(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_Y = ((np.cos(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_X = np.concatenate([[0], pb_X]);&amp;#10;pb_Y = np.concatenate([[0], pb_Y]);&amp;#10;pb_coords = np.transpose(np.vstack([pb_X, pb_Y]));&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="print(totalReward_tot)" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="console.log(totalReward_tot);&amp;#10;" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = (&quot;\u00a3&quot; + totalReward.toString());&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = '£'+str(totalReward)&amp;#10;&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="code_reset2" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_changeRewPos">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="shieldDegrees = 20;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;trueMean = storedStream_np[[0, 0]];&amp;#10;trueVariance = storedStream_np[[0, 2]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;if ((wins === 0)) {&amp;#10;    totalReward = 1;&amp;#10;} else {&amp;#10;    totalReward = 3.5;&amp;#10;}&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 20; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;trueMean = storedStream_np[0,0];&amp;#10;trueVariance = storedStream_np[0,2];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;if wins == 0:&amp;#10;    totalReward = 1;&amp;#10;else:&amp;#10;    totalReward = 3.5;&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#progress circle variables&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)))" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        totalReward = 0.1;&amp;#10;    if wins == 1:&amp;#10;        totalReward = 0;&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;triggerValue = 0&amp;#10;win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX = np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY = np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    trueMean = storedStream_np[currentFrame,0];&amp;#10;    trueVariance = storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame == 0:&amp;#10;    if not sendTrigger:&amp;#10;        #we'll send different stim change triggers depending on hit/no-hit&amp;#10;        if currentHit:&amp;#10;            triggerValue = 1&amp;#10;        else:&amp;#10;            triggerValue = 2&amp;#10;&amp;#10;        sendTrigger = True&amp;#10;        win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;    if currentHit:&amp;#10;        if wins == 0:&amp;#10;            if shieldDegrees == 20:&amp;#10;                totalReward = totalReward;&amp;#10;            if shieldDegrees == 40:&amp;#10;                totalReward = totalReward - lossFactor/3;&amp;#10;            if shieldDegrees == 60:&amp;#10;                totalReward = totalReward - lossFactor/2;&amp;#10;        if wins == 1:&amp;#10;            if shieldDegrees == 20:&amp;#10;                totalReward = totalReward + 2*0.00003;&amp;#10;            if shieldDegrees == 40:&amp;#10;                totalReward = totalReward;&amp;#10;            if shieldDegrees == 60:&amp;#10;                totalReward = totalReward - 2*0.00003;&amp;#10;        &amp;#10;        hit_i = 1;&amp;#10;        first_hit = 1;&amp;#10;    else:&amp;#10;        if totalReward &gt; 0:&amp;#10;            totalReward = totalReward - lossFactor;&amp;#10;        else:&amp;#10;            totalReward = 0;&amp;#10;        &amp;#10;if currentFrame &gt; 0:&amp;#10;    if (storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]):&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            sendTrigger = True&amp;#10;            win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;        if currentHit:&amp;#10;            if wins == 0:&amp;#10;                if shieldDegrees == 20:&amp;#10;                    totalReward = totalReward;&amp;#10;                if shieldDegrees == 40:&amp;#10;                    totalReward = totalReward - lossFactor/3;&amp;#10;                if shieldDegrees == 60:&amp;#10;                    totalReward = totalReward - lossFactor/2;&amp;#10;            if wins == 1:&amp;#10;                if shieldDegrees == 20:&amp;#10;                    totalReward = totalReward + 2*0.00003;&amp;#10;                if shieldDegrees == 40:&amp;#10;                    totalReward = totalReward;&amp;#10;                if shieldDegrees == 60:&amp;#10;                    totalReward = totalReward - 2*0.00003;&amp;#10;            &amp;#10;            hit_i = 1;&amp;#10;            first_hit = 1;&amp;#10;        else:&amp;#10;            if totalReward &gt; 0:&amp;#10;                totalReward = totalReward - lossFactor;&amp;#10;            else:&amp;#10;                totalReward = 0;&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 20:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 40:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 60:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue,trueMean,trueVariance,volatility])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;pc_orientation = pc_orientation + (360/nFrames)/2;&amp;#10;pc_degrees = pc_degrees + (360/nFrames)/2;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)));" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        totalReward = 0.1;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;triggerValue = 0;&amp;#10;psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(0));&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;    psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    trueMean = storedStream_np[[currentFrame, 0]];&amp;#10;    trueVariance = storedStream_np[[currentFrame, 2]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame === 0)) {&amp;#10;    if ((! sendTrigger)) {&amp;#10;        if (currentHit) {&amp;#10;            triggerValue = 1;&amp;#10;        } else {&amp;#10;            triggerValue = 2;&amp;#10;        }&amp;#10;        sendTrigger = true;&amp;#10;        psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;    }&amp;#10;    if (currentHit) {&amp;#10;        if ((wins === 0)) {&amp;#10;            if ((shieldDegrees === 20)) {&amp;#10;                totalReward = totalReward;&amp;#10;            }&amp;#10;            if ((shieldDegrees === 40)) {&amp;#10;                totalReward = (totalReward - (lossFactor / 3));&amp;#10;            }&amp;#10;            if ((shieldDegrees === 60)) {&amp;#10;                totalReward = (totalReward - (lossFactor / 2));&amp;#10;            }&amp;#10;        }&amp;#10;        if ((wins === 1)) {&amp;#10;            if ((shieldDegrees === 20)) {&amp;#10;                totalReward = (totalReward + (2 * 3e-05));&amp;#10;            }&amp;#10;            if ((shieldDegrees === 40)) {&amp;#10;                totalReward = totalReward;&amp;#10;            }&amp;#10;            if ((shieldDegrees === 60)) {&amp;#10;                totalReward = (totalReward - (2 * 3e-05));&amp;#10;            }&amp;#10;        }&amp;#10;        hit_i = 1;&amp;#10;        first_hit = 1;&amp;#10;    } else {&amp;#10;        if ((totalReward &gt; 0)) {&amp;#10;            totalReward = (totalReward - lossFactor);&amp;#10;        } else {&amp;#10;            totalReward = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((currentFrame &gt; 0)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;            psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;        }&amp;#10;        if (currentHit) {&amp;#10;            if ((wins === 0)) {&amp;#10;                if ((shieldDegrees === 20)) {&amp;#10;                    totalReward = totalReward;&amp;#10;                }&amp;#10;                if ((shieldDegrees === 40)) {&amp;#10;                    totalReward = (totalReward - (lossFactor / 3));&amp;#10;                }&amp;#10;                if ((shieldDegrees === 60)) {&amp;#10;                    totalReward = (totalReward - (lossFactor / 2));&amp;#10;                }&amp;#10;            }&amp;#10;            if ((wins === 1)) {&amp;#10;                if ((shieldDegrees === 20)) {&amp;#10;                    totalReward = (totalReward + (2 * 3e-05));&amp;#10;                }&amp;#10;                if ((shieldDegrees === 40)) {&amp;#10;                    totalReward = totalReward;&amp;#10;                }&amp;#10;                if ((shieldDegrees === 60)) {&amp;#10;                    totalReward = (totalReward - (2 * 3e-05));&amp;#10;                }&amp;#10;            }&amp;#10;            hit_i = 1;&amp;#10;            first_hit = 1;&amp;#10;        } else {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                totalReward = (totalReward - lossFactor);&amp;#10;            } else {&amp;#10;                totalReward = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 20)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 40)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 60)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;    psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;}&amp;#10;pc_orientation = (pc_orientation + ((360 / nFrames) / 2));&amp;#10;pc_degrees = (pc_degrees + ((360 / nFrames) / 2));&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = `£${totalReward}`;&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(0));&amp;#10;triggerValue = 0;&amp;#10;sendTrigger = false;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = &quot;£%.2f&quot; %(totalReward);&amp;#10;&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;triggerValue = 0;&amp;#10;sendTrigger = False;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_changeRewPos" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="harmless_area">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[0, 0, 0]" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="harmless_area" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="circle" valType="str"/>
        <Param name="size" updates="constant" val="(6.6, 6.6)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="$shieldColour" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1.1, 1.1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="blue" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="blue" valType="color"/>
        <Param name="lineWidth" updates="constant" val="3" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_centre" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="set every frame" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="constant" val="[[0, 0], [0, CIRCLE_RADIUS*1.2]]" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every frame" val="$[0, 0, 0]" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="shield_bg_short" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="shieldRotation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="shieldCoords" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="laser">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="red" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="red" valType="color"/>
        <Param name="lineWidth" updates="constant" val="10" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="laser" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="laserRotation" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="set every repeat" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="laser_long">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="red" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="red" valType="color"/>
        <Param name="lineWidth" updates="constant" val="10" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="laser_long" valType="code"/>
        <Param name="opacity" updates="set every frame" val="laser_long_opacity" valType="num"/>
        <Param name="ori" updates="set every frame" val="laserRotation" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="set every repeat" val="(1, 1)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="[[0, 0], [0, CIRCLE_RADIUS*1.4]]" valType="list"/>
      </PolygonComponent>
      <PolygonComponent name="progress_bar">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="white" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="green" valType="color"/>
        <Param name="lineWidth" updates="constant" val="10" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="progress_bar" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="set every frame" val="pc_orientation" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="custom polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
        <Param name="vertices" updates="set every frame" val="pc_coords" valType="list"/>
      </PolygonComponent>
      <ImageComponent name="radioactive">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1, 1, 1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$sourceImageFile" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radioactive" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(2, 2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="cm" valType="str"/>
      </ImageComponent>
      <ParallelOutComponent name="trialTrigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="0.01" valType="code"/>
        <Param name="name" updates="None" val="trialTrigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="$triggerValue" valType="code"/>
        <Param name="startEstim" updates="None" val="0" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$sendTrigger==True" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
      <PolygonComponent name="square_diode">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every frame" val="black" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every frame" val="black" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="square_diode" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every frame" val="hgf/404" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="None" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.0625, 0.0625)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="vertices" updates="constant" val="" valType="list"/>
      </PolygonComponent>
      <EyetrackerRecordComponent name="etRecord">
        <Param name="actionType" updates="None" val="Start and Stop" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="etRecord" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="frame N" valType="str"/>
        <Param name="stopVal" updates="constant" val="nFrames" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
      </EyetrackerRecordComponent>
    </Routine>
    <Routine name="sizeExamples">
      <TextComponent name="text_size_examples">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_size_examples" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.23)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Remember that you can increase your shield size to capture radiation within a larger range.&amp;#10;&amp;#10;However, this comes at a cost: your shield becomes less efficient. If you catch radiation with a larger shield, some amount of radiation will still pass through and reach Earth. &amp;#10;&amp;#10;Below, you can see the shielding efficiency of &amp;#10;a small, medium, and large shield:" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <TextComponent name="text_size_advance">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_size_advance" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.36)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press any key to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <ImageComponent name="shield_all_sizes">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/shield_sml.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="shield_all_sizes" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.15)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.2, 0.25)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_size_examples">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_size_examples" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="sizeExamples_1">
      <TextComponent name="text_size_examples_2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_size_examples_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.23)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="It is not only about catching the laser with the shield: the closer you place the centre of the shield to the laser, the less damage the latter does. The shield will let less and less radiations through, the closer the laser is to its centre, making the laser less and less visible. However, a larger shield lets more radiations through than a small one.&amp;#10;&amp;#10;You can see differences in laser visibility in the examples below." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <TextComponent name="text_size_advance_2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_size_advance_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.34)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="When you are ready to advance, press any button." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <ImageComponent name="shield_small_2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/shield_small_vsb.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="shield_small_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(-0.4, -0.13)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="shield_medium_2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/shield_medium_vsb.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="shield_medium_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.13)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="shield_large_2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/shield_large_vsb.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="shield_large_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.4, -0.13)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_size_examples_2">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_size_examples_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_1">
      <CodeComponent name="code_begin">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="#import necessary packages&amp;#10;import numpy as np;&amp;#10;import os;&amp;#10;&amp;#10;#keyboard constants&amp;#10;kb = keyboard.Keyboard()&amp;#10;keys_move = ['2', '1'];&amp;#10;keys_size = ['3', '4'];&amp;#10;key_right = '2';&amp;#10;key_left = '1';&amp;#10;key_up = '3';&amp;#10;key_down = '4';&amp;#10;&amp;#10;#set constants for the experiment&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;&amp;#10;SHIELD_GROWTH_SPEED = 20; #in degrees&amp;#10;&amp;#10;minShieldDegrees = 25;&amp;#10;maxShieldDegrees = 65;&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;&amp;#10;#instructed training variables&amp;#10;training_loop_count = -1&amp;#10;target_orientation = 0&amp;#10;&amp;#10;#shield variables&amp;#10;shieldDegrees = 45; #because it needs to be predefined&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#initialise list containing data to be saved&amp;#10;saveData = [[&quot;blockID&quot;,&quot;currentFrame&quot;,&quot;laserRotation&quot;,&quot;shieldRotation&quot;,&quot;shieldDegrees&quot;,&quot;currentHit&quot;,&quot;totalReward&quot;,&quot;sendTrigger&quot;,&quot;triggerValue&quot;]]&amp;#10;saveFilename = &quot;savedData_&quot; + str(expInfo['participant']) + str(expInfo['session']) + &quot;.csv&quot; #load stimulusStream into NumPy array&amp;#10;&amp;#10;#reward variables&amp;#10;bar_length = 0.5;&amp;#10;red_bar_length = 0;&amp;#10;rewardFeedback = &quot;&quot;&amp;#10;&amp;#10;top_amount = 10;&amp;#10;bottom_amount = 9;&amp;#10;&amp;#10;totalReward = 10;&amp;#10;&amp;#10;win.mouseVisible = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as np from 'numpy';&amp;#10;import * as os from 'os';&amp;#10;var CIRCLE_RADIUS, ROTATION_SPEED, SHIELD_GROWTH_SPEED, bar_length, bottom_amount, kb, key_down, key_left, key_right, key_up, keys_move, keys_size, maxShieldDegrees, minShieldDegrees, red_bar_length, rewardFeedback, saveData, saveFilename, shieldCoords, shieldDegrees, shieldHeight, shieldRotation, shieldWidth, shieldX, shieldY, target_orientation, top_amount, totalReward, training_loop_count;&amp;#10;kb = new keyboard.Keyboard();&amp;#10;keys_move = [&quot;2&quot;, &quot;1&quot;];&amp;#10;keys_size = [&quot;3&quot;, &quot;4&quot;];&amp;#10;key_right = &quot;2&quot;;&amp;#10;key_left = &quot;1&quot;;&amp;#10;key_up = &quot;3&quot;;&amp;#10;key_down = &quot;4&quot;;&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;SHIELD_GROWTH_SPEED = 20;&amp;#10;minShieldDegrees = 25;&amp;#10;maxShieldDegrees = 65;&amp;#10;training_loop_count = (- 1);&amp;#10;target_orientation = 0;&amp;#10;shieldDegrees = 45;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;shieldRotation = 360;&amp;#10;saveData = [[&quot;blockID&quot;, &quot;currentFrame&quot;, &quot;laserRotation&quot;, &quot;shieldRotation&quot;, &quot;shieldDegrees&quot;, &quot;currentHit&quot;, &quot;totalReward&quot;, &quot;sendTrigger&quot;, &quot;triggerValue&quot;]];&amp;#10;saveFilename = (((&quot;savedData_&quot; + expInfo[&quot;participant&quot;].toString()) + expInfo[&quot;session&quot;].toString()) + &quot;.csv&quot;);&amp;#10;bar_length = 0.5;&amp;#10;red_bar_length = 0;&amp;#10;rewardFeedback = &quot;&quot;;&amp;#10;top_amount = 10;&amp;#10;bottom_amount = 9;&amp;#10;totalReward = 10;&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="name" updates="None" val="code_begin" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_begin_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="#import necessary packages&amp;#10;import numpy as np;&amp;#10;import os;&amp;#10;&amp;#10;#keyboard constants&amp;#10;session = 1;&amp;#10;&amp;#10;kb = keyboard.Keyboard()&amp;#10;&amp;#10;if session == 1:&amp;#10;    keys_move = ['2', '1'];&amp;#10;    keys_size = ['4', '3'];&amp;#10;    key_right = '2';&amp;#10;    key_left = '1';&amp;#10;    key_up = '4';&amp;#10;    key_down = '3';&amp;#10;if session == 2:&amp;#10;    keys_move = ['4', '3'];&amp;#10;    keys_size = ['2', '1']&amp;#10;    key_right = '4';&amp;#10;    key_left = '3';&amp;#10;    key_up = '2';&amp;#10;    key_down = '1';&amp;#10;&amp;#10;#set constants for the experiment&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;&amp;#10;SHIELD_GROWTH_SPEED = 20; #in degrees&amp;#10;&amp;#10;minShieldDegrees = 20;&amp;#10;maxShieldDegrees = 60;&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;&amp;#10;#shield variables&amp;#10;shieldDegrees = 40; #because it needs to be predefined&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX = np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY = np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#initialise list containing data to be saved&amp;#10;saveData = [[&quot;blockID&quot;,&quot;currentFrame&quot;,&quot;laserRotation&quot;,&quot;shieldRotation&quot;,&quot;shieldDegrees&quot;,&quot;currentHit&quot;,&quot;totalReward&quot;,&quot;sendTrigger&quot;,&quot;triggerValue&quot;,&quot;trueMean&quot;,&quot;trueVariance&quot;,&quot;volatility&quot;, &quot;eyePosition&quot;]]&amp;#10;saveFilename = &quot;savedData_&quot; + str(expInfo['participant']) + str(expInfo['session']) + &quot;.csv&quot; #load stimulusStream into NumPy array&amp;#10;&amp;#10;#reward variables&amp;#10;wins = 0;&amp;#10;&amp;#10;if wins == 0:&amp;#10;    totalReward_tot = 0;&amp;#10;else:&amp;#10;    totalReward_tot = 0;&amp;#10;&amp;#10;lossFactor = 0.003;&amp;#10;&amp;#10;totalReward_text = '';&amp;#10;&amp;#10;win.mouseVisible = False&amp;#10;&amp;#10;#progress circle variables&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)))&amp;#10;&amp;#10;hgf = 0;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as np from 'numpy';&amp;#10;import * as os from 'os';&amp;#10;var CIRCLE_RADIUS, ROTATION_SPEED, SHIELD_GROWTH_SPEED, hgf, kb, key_down, key_left, key_right, key_up, keys_move, keys_size, lossFactor, maxShieldDegrees, minShieldDegrees, pc_X, pc_Y, pc_coords, pc_degrees, pc_orientation, saveData, saveFilename, session, shieldCoords, shieldDegrees, shieldHeight, shieldRotation, shieldWidth, shieldX, shieldY, totalReward_text, totalReward_tot, wins;&amp;#10;session = 1;&amp;#10;kb = new keyboard.Keyboard();&amp;#10;if ((session === 1)) {&amp;#10;    keys_move = [&quot;2&quot;, &quot;1&quot;];&amp;#10;    keys_size = [&quot;4&quot;, &quot;3&quot;];&amp;#10;    key_right = &quot;2&quot;;&amp;#10;    key_left = &quot;1&quot;;&amp;#10;    key_up = &quot;4&quot;;&amp;#10;    key_down = &quot;3&quot;;&amp;#10;}&amp;#10;if ((session === 2)) {&amp;#10;    keys_move = [&quot;4&quot;, &quot;3&quot;];&amp;#10;    keys_size = [&quot;2&quot;, &quot;1&quot;];&amp;#10;    key_right = &quot;4&quot;;&amp;#10;    key_left = &quot;3&quot;;&amp;#10;    key_up = &quot;2&quot;;&amp;#10;    key_down = &quot;1&quot;;&amp;#10;}&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;SHIELD_GROWTH_SPEED = 20;&amp;#10;minShieldDegrees = 20;&amp;#10;maxShieldDegrees = 60;&amp;#10;shieldDegrees = 40;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;shieldRotation = 360;&amp;#10;saveData = [[&quot;blockID&quot;, &quot;currentFrame&quot;, &quot;laserRotation&quot;, &quot;shieldRotation&quot;, &quot;shieldDegrees&quot;, &quot;currentHit&quot;, &quot;totalReward&quot;, &quot;sendTrigger&quot;, &quot;triggerValue&quot;, &quot;trueMean&quot;, &quot;trueVariance&quot;, &quot;volatility&quot;, &quot;eyePosition&quot;]];&amp;#10;saveFilename = (((&quot;savedData_&quot; + expInfo[&quot;participant&quot;].toString()) + expInfo[&quot;session&quot;].toString()) + &quot;.csv&quot;);&amp;#10;wins = 0;&amp;#10;if ((wins === 0)) {&amp;#10;    totalReward_tot = 0;&amp;#10;} else {&amp;#10;    totalReward_tot = 0;&amp;#10;}&amp;#10;lossFactor = 0.003;&amp;#10;totalReward_text = &quot;&quot;;&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;hgf = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_begin_2" valType="code"/>
      </CodeComponent>
      <TextboxComponent name="title">
        <Param name="alignment" updates="constant" val="center" valType="str"/>
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="True" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="color"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="color"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="title" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="padding" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.35)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(None, None)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Save-the-world task" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <TextComponent name="text_instructions_1">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_instructions_1" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is the MEG version of the game you just practiced.&amp;#10;&amp;#10;During the game (after the instructions), please remember to keep your eyes as fixed as possible on the centre of the screen.&amp;#10;&amp;#10;Save the world (and earn money) by navigating the shield to where you expect radiation to hit Earth.​&amp;#10;&amp;#10;Press any key to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_i1">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_i1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ParallelOutComponent name="instructions_trigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="instructions_trigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="100" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.05" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="instructions_2">
      <TextComponent name="text_instructions_2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_instructions_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.03)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Here you see one substance in the centre of the screen, its red radiation beam, and a white absorbing shield. In this example, the shield is not in the right position and thus the beam is not stopped and damages Earth.&amp;#10;​&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Your task is to manoeuvre the shield to catch as many emissions as possible. Press any key to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <ImageComponent name="shield_miss_earth">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/shield_miss_earth.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="shield_miss_earth" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.4, 0.373)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_i2">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_i2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="radio_colours">
      <ImageComponent name="radioactive_colour1">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/radioactive3.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radioactive_colour1" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(-0.2, 0.11)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="radioactive_colour2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/radioactive2.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="radioactive_colour2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.2, 0.11)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_colours">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_colours" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will encounter two different radioactive sources:&amp;#10;A red and a blue source.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;The only difference between these sources is &amp;#10;how often they change their emission angle over time.&amp;#10;&amp;#10;One session of this game has 4 blocks. Every block lasts about 3 minutes, and in this version of the game you will see a progress circle around the source.&amp;#10;You will play 4 sessions in total.&amp;#10;&amp;#10;Press any key to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_colours">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_colours" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="reward">
      <TextComponent name="text_reward">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="text_reward" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In every block, your reward for saving the world from this radiation starts off at £1. The more radiation hits Earth, the more reward you lose.&amp;#10;&amp;#10;In this version of the game, you will not see the reward bar on the right of the screen. However, the rules for making money in this task are the same as before. You will receive feedback about how much reward you have left after every block. &amp;#10;&amp;#10;Press any key to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_reward">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_reward" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="transparence">
      <ImageComponent name="shield_as_transparence">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/shield_sml.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="shield_as_transparence" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.03)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.2, 0.25)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_transparence">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="text_transparence" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Remember:&amp;#10;Because larger shields let some radiation through, you will still lose &amp;#10;a small amount of your reward even if you catch the radiation.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Your task is to save the world from this harmful substance, &amp;#10;and keep as much of your reward by doing this!&amp;#10;&amp;#10;Ready?&amp;#10;Press any button to start playing the game." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_transparence">
        <Param name="allowedKeys" updates="constant" val="" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_transparence" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="sessionEndText">
      <CodeComponent name="code_totRew">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="totRew_text = `£${totalReward_tot}`;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="totRew_text = &quot;£%.2f&quot; %(totalReward_tot);" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_totRew" valType="code"/>
      </CodeComponent>
      <TextComponent name="textEndSession">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="textEndSession" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Well done. You completed one session.&amp;#10;In this session, you made:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Take a break. " valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="finalReward_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="finalReward_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$totRew_text" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <ParallelOutComponent name="end_trigger">
        <Param name="address" updates="None" val="0x4FF8" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="name" updates="None" val="end_trigger" valType="code"/>
        <Param name="register" updates="None" val="EIO" valType="str"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startData" updates="None" val="105" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopData" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.05" valType="code"/>
        <Param name="syncScreen" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
      </ParallelOutComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_1"/>
    <Routine name="practiceMove"/>
    <Routine name="sizeExamples"/>
    <Routine name="practiceSize"/>
    <Routine name="radio_colours"/>
    <Routine name="reward"/>
    <Routine name="transparence"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('blockID', 3), ('sourceImage', 'radioactive2.png'), ('volatility', 1), ('blockFileName', 'MainVaJmpSession5_block3.csv')]), OrderedDict([('blockID', 1), ('sourceImage', 'radioactive3.png'), ('volatility', 0), ('blockFileName', 'MainVaJmpSession5_block1.csv')]), OrderedDict([('blockID', 2), ('sourceImage', 'radioactive2.png'), ('volatility', 1), ('blockFileName', 'MainVaJmpSession5_block2.csv')]), OrderedDict([('blockID', 4), ('sourceImage', 'radioactive3.png'), ('volatility', 0), ('blockFileName', 'MainVaJmpSession5_block4.csv')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimgen\blocks_main1 - 2 - P019.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="blockStartText"/>
    <Routine name="trial"/>
    <Routine name="blockEndText"/>
    <LoopTerminator name="blocks"/>
    <Routine name="sessionEndText"/>
  </Flow>
</PsychoPy2experiment>
